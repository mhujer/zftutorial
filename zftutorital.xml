<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" type="xml"?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.0" xml:lang="cs">

    <info>
        <title>Začínáme se Zend Frameworkem</title>
        <author>
            <personname>Rob Allen (autor)</personname>
        </author>
        <author>
            <personname>Martin Hujer (překlad)</personname>
            <email>mhujer@gmail.com</email>
        </author>
    </info>
    <para><emphasis role="italic">Tento text je překladem anglického návodu <link
                xlink:href="http://akrabat.com/zend-framework-tutorial/">Tutorial: Getting Started
                with Zend Framework 1.10</link>, jehož autorem je Rob Allen (revize
            1.7.6)</emphasis>
    </para>
    <para>Učelem tutoriálu je představení použití Zend Frameworku vytvořením jednoduché databázové
        aplikace s využitím vzoru Model-View-Controller.</para>
    <para>
        <emphasis role="bold">Poznámka: Tento tutoriál byl testován na Zend Frameworku od verze
            1.10.1 do 1.11.4. Je velká šance, že bude fungovat s následujícími verzemi řady 1.x, ale
            určitě nebude fungovat s verzemi předcházejícími 1.10.1.</emphasis>
    </para>
    <section>
        <title>Požadavky</title>
        <para>Zend Framework má tyto požadavky:<itemizedlist>
                <listitem>
                    <para>PHP 5.2.4 (nebo vyšší)</para>
                </listitem>
                <listitem>
                    <para>Webový server s podporou <code>mod_rewrite</code> nebo podobnou
                        funkcionalitou</para>
                </listitem>
            </itemizedlist></para>
    </section>
    <section>
        <title>Předpoklady</title>
        <para>Předpokládám, že používáte webový server Apache a PHP 5.2.4 nebo vyšší. <emphasis
                role="bold">Je nutné, aby jste měli v Apachi nainstalované a nastavené rozšíření
                mod_rewrite</emphasis></para>
        <para>Je také nutné se ujistit, že Apache má nastavenou podporu souboru
                <filename>.htaccess</filename>. To se obvykle dělá pomocí změny:
            <programlisting language="apache"><![CDATA[AllowOverride None]]></programlisting> na
            <programlisting language="apache"><![CDATA[AllowOverride All]]></programlisting> v
            souboru <filename>httpd.conf</filename>. Podrobnější informace najdete v dokumentaci k
            Apache. Pokud nebude mít správně nastavený <code>mod_rewrite</code> a
                <filename>.htaccess</filename>, tak nebude moci otevřít jinou stránku než homepage.
        </para>
    </section>
    <section>
        <title>Získání frameworku</title>
        <para>Zend Framework je k dispozici ke stažení na adrese <link
                xlink:href=" http://framework.zend.com/download/latest"
                >http://framework.zend.com/download/latest</link> buď ve formátu .zip nebo .tar.gz.
            Na konci stránky naleznete přímé odkazy. Verze <quote>Minimal</quote> je to, co
            potřebujete.</para>
    </section>
    <section>
        <title>Nastavení Zend_Tool</title>
        <para> Zend Framework je dodávan s nástrojem pro příkazovou řádku. Začneme jeho
            nastavením.</para>
        <section>
            <title>Zend_Tool na Windows</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Vytvořte v <code>Program Files</code> nový adresář pojmenovaný
                                <filename>ZendFrameworkCli</filename></para>
                    </listitem>
                    <listitem>
                        <para>Poklikejte na stažený soubor,
                                <filename>ZendFramework-1.10.6-minimal.zip.</filename></para>
                    </listitem>
                    <listitem>
                        <para>Zkopírujte adresáře <code>bin</code> a <code>library</code> do složky
                                <filename>C:\Program Files\ZendFrameworkCli</filename>. Složka teď
                            bude mít dva podadresáře <filename>bin</filename> a
                                <filename>library</filename>.</para>
                    </listitem>
                    <listitem>
                        <para>Přidejte adresář <code>bin</code> do systémové cesty:</para>
                        <para>
                            <itemizedlist>
                                <listitem>
                                    <para>Ovládací panely → Systém</para>
                                </listitem>
                                <listitem>
                                    <para>Upřesnit nastavení systému → karta Upřesnit → Proměnné
                                        prostředí</para>
                                </listitem>
                                <listitem>
                                    <para>V části <quote>Systémové proměnné</quote> najděte
                                            <code>Path</code> a poklikejte na ni</para>
                                </listitem>
                                <listitem>
                                    <para>Přidejte <code>;C:\Program
                                            Files\ZendFrameworkCli\bin</code> na konec pole a
                                        stiskněte OK. (Středník na začátku je důležitý!)</para>
                                </listitem>
                                <listitem>
                                    <para>Restartuje PC. (Pozn. možná to půjde i bez toho)</para>
                                </listitem>
                            </itemizedlist>
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Zend_Tool na OS X (na Linuxu je to stejné)</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Rozbalte stažený soubor
                                <filename>ZendFramework-1.10.6-minimal.zip.</filename> ve vaší
                            složce <filename>Downloads</filename> poklikáním na něj.</para>
                    </listitem>
                    <listitem>
                        <para>Zkopírujte do <filename>/usr/local/ZendFrameworkCli</filename> -
                            otevřte Terminal a napište:</para>
                        <para>
                            <code>sudo cp -r ~/Downloads/ZendFramework-1.10.6-minimal
                                /usr/local/ZendFrameworkCli</code>
                        </para>
                    </listitem>
                    <listitem>
                        <para>Přidejte si alias do svého bash profilu:<itemizedlist>
                                <listitem>
                                    <para>Do Terminalu zadejte <code>open
                                        ~/.bash_profile</code></para>
                                </listitem>
                                <listitem>
                                    <para>Na konec souboru přidejte <code>alias
                                            zf=/usr/local/ZendFrameworkCli/bin/zf.sh</code></para>
                                </listitem>
                                <listitem>
                                    <para>Uložte a zavřete TextEdit</para>
                                </listitem>
                                <listitem>
                                    <para>Zavřete Terminal</para>
                                </listitem>
                            </itemizedlist>
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Otestování Zend_Tool</title>
            <para>To, že jste Zend_Tool nainstalovali správně ověříte tak, že otevřete příkazovou
                řádku a zadáte: <programlisting><![CDATA[zf show version]]></programlisting></para>
            <para>Pokud je vše v pořádku, uvidíte:
                <programlisting><![CDATA[Zend Framework Version: 1.10.0]]></programlisting></para>
            <para>Pokud ne, ověřte, zda jste správně nastavili cestu a že adresář
                    <filename>bin</filename> v <filename>ZendFrameworkCli</filename> existuje. Až
                vám bude <code>zf</code> fungovat, pomocí <command>zf --help</command> si můžete
                vypsat dostupné příkazy</para>
            <para>
                <emphasis role="bold">Pokud je vaše distribuce PHP dodávána se Zend Frameworkem,
                    ověřte, zda nepoužívá verzi ZF 1.9, jinak vám tento tutoriál nebude
                    fungovat.</emphasis>
            </para>
        </section>
    </section>
    <section>
        <title>Ukázková aplikace</title>
        <para>Teď už je vše připraveno a můžeme se pustit do vytváření Zend Frameworkové aplikace.
            Nejprve se podíváme, co vlastně budeme dělat. Vytvoříme jednoduchý systém pro evidenci
            našich CDček. Hlavní stránka nám umožní přidat, upravovat a mazat CDčka. Při vývoji
            software je vždy dobré trochu plánovat. Náš web se bude skládat ze čtyř stránek:</para>
        <para>
            <informaltable frame="all">
                <tgroup cols="2">
                    <colspec colname="c1" colnum="1" colwidth="1.0*"/>
                    <colspec colname="c2" colnum="2" colwidth="3.0*"/>
                    <tbody>
                        <row>
                            <entry>Domovská stránka</entry>
                            <entry>Zobrazí seznam alb a odkazy na jejich editaci a smazání. Bude tam
                                také odkaz na přidání nového alba.</entry>
                        </row>
                        <row>
                            <entry>Přidat nové album</entry>
                            <entry>Tato stránka bude obsahovat formulář pro přidání nového
                                alba</entry>
                        </row>
                        <row>
                            <entry>Upravit album</entry>
                            <entry>Tato stránka bude obsahovat formulář pro editaci alba</entry>
                        </row>
                        <row>
                            <entry>Smazat album</entry>
                            <entry>Tato stránka nejdříve zobrazí potvrzení, zda opravdu chceme album
                                smazat a pak ho smaže.</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
        </para>
        <para> Data budeme ukládat do databáze, kde budeme potřebovat jen jednu tabulku: </para>
        <para><informaltable frame="all">
                <tgroup cols="4">
                    <colspec colname="c1" colnum="1" colwidth="1.5*"/>
                    <colspec colname="c2" colnum="2" colwidth="1.5*"/>
                    <colspec colname="c3" colnum="3" colwidth="1.0*"/>
                    <colspec colname="c4" colnum="4" colwidth="2.5*"/>
                    <thead>
                        <row>
                            <entry>Jméno sloupce</entry>
                            <entry>Typ</entry>
                            <entry>Null?</entry>
                            <entry>Poznámky</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>id</entry>
                            <entry><code>integer</code></entry>
                            <entry>No</entry>
                            <entry>Primary key, auto increment</entry>
                        </row>
                        <row>
                            <entry>artist</entry>
                            <entry><code>varchar(100)</code></entry>
                            <entry>No</entry>
                            <entry/>
                        </row>
                        <row>
                            <entry>title</entry>
                            <entry><code>varchar(100)</code></entry>
                            <entry>No</entry>
                            <entry/>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable></para>
    </section>
    <section>
        <title>Začínáme vytvářet aplikaci</title>
        <para>Abychom si ušetřili práci a čas, budeme co nejvíce používat nástroj
                <filename>zf</filename>. První úkol je vytvoření kostry souborů a adresářů.</para>
        <para>Otevřte Terminal nebo příkazovou řádku a přepněte se do kořenového adresáře webového
            serveru. Například pro xampp to bude <filename>C:/xampp/htdocs/</filename>. Ujistěte se,
            že tam máte oprávnění pro zápis a webový server může číst. Zadejte:</para>
        <para><code>zf create project zf-tutorial</code></para>
        <para>ZF vytvoří adresář <filename>zf-tutorial</filename> a v něm doporučenou strukturu. Ta
            předpokládá, že máte úplnou kontrolu nad nastavením Apache a můžete umístit většinu
            souborů mimo root webu. Měli by jste vidět tyto soubory a adresáře:</para>
        <para><inlinemediaobject>
                <imageobject>
                    <imagedata fileref="img/directory-structure.png"/>
                </imageobject>
            </inlinemediaobject></para>
        <para>V adresáři <filename>public</filename> je ještě skrytý soubor
                <filename>.htaccess</filename></para>
        <para>Aplikace je uložena v adresáři <filename>application</filename>. Jak je vidět na
            obrázku, máme samostatné adresáře pro soubory modelů, view a kontrolerů. Adresář
                <filename>public/</filename> by byl na produkčním serveru jako jediný přístupný z
            webu. URL naší aplikace na localhostu bude
                <uri>http://localhost/zf-tutorial/public/</uri>.</para>
        <para><emphasis role="bold">Poznámka:</emphasis> Na živém serveru by jste vytvořili virtual
            host a nastavili document root přímo do adresáře <filename>public</filename>. Například
            pokud by jste vytvářeli virtual host pojmenovaný <code>zf-tutorial.localhost</code>, tak
            by to vypadalo nějak takto:</para>
        <programlisting language="apache"><![CDATA[<VirtualHost *:80>
    ServerName zf-tutorial.localhost
    DocumentRoot /var/www/html/zf-tutorial/public
    <Directory "/var/www/html/zf-tutorial/public">
        AllowOverride All
    </Directory>
</VirtualHost>]]></programlisting>
        <para>Web potom bude přístupný přes <uri> http://zf-tutorial.localhost/</uri>. Ujistěte se,
            že jste v souboru <filename>/etc/hosts</filename> nebo
                <filename>c:\windows\system32\drivers\etc\hosts</filename> nasměrovali
                <uri>zf-tutorial.localhost</uri> na 127.0.0.1. V tomto tutoriálu to tak dělat
            nebudeme, pro testování použijeme jen podadresář.</para>
        <para>Obrázky, JavaScript a CSS soubory jsou uloženy v samostatných podadresářích v adresáři
                <filename>public/</filename>. Stažený Zend Framework umístíme do adresáře
                <filename>library/</filename>. Pokud budeme potřebovat další knihovny, tak ty patří
            také tam.</para>
        <para>Zkopírujte adresář <filename>library/Zend/</filename> ze staženého archivu
                <filename>ZendFramework-1.10.6-minimal.zip</filename> do vytvořeného
                <filename>zf-tutorial/library</filename>. Adresář
                <filename>zf-tutorial/library/</filename> bude tedy obsahovat adresář
                <filename>Zend</filename>.</para>
        <para>To, že je vše v pořádku můžete ověřit otevřením adresy
                <uri>http://localhost/zf-tutorial/public</uri>. Měli by jste vidět něco jako
            tohle:</para>
        <para><inlinemediaobject>
                <imageobject>
                    <imagedata fileref="img/basic-app-homepage.png"/>
                </imageobject>
            </inlinemediaobject></para>
        <section>
            <title>Princip bootstrapování</title>
            <para>Zend Framework využívá návrhový vzor Front Controller, kdy se všechy požadavky
                zpracovávají v jednom souboru <filename>index.php</filename>. Toho dosáhneme
                využitím souboru <filename>.htaccess</filename> v adresáři
                    <filename>zf-tutorial/public</filename>, který pro nás vytvořil
                    <code>Zend_Tool</code>. Ten přesměrová všechny požadavky na
                    <filename>public/index.php</filename>, který nám také <code>Zend_Tool</code>
                vytvořil.</para>
            <para>Soubor <filename>index.php</filename> tvoří vstupní bod do naší aplikace a jeho
                úkolem je inicializace aplikace vytvořením instance <code>Zend_Application</code> a
                nastavení konstant <code>APPLICATION_PATH</code> a <code>APPLICATION_ENV</code>,
                které definují cestu do adresáře <filename>application/</filename> a prostředí
                (neboli mód) aplikace. Výchozím prostředím je <code>production</code> a je vhodné ho
                změnit na <code>development</code> přidání řádku do souboru
                    <filename>.htaccess</filename>:</para>
            <programlisting language="php">SetEnv APPLICATION_ENV development</programlisting>
            <para>Komponenta <code>Zend_Application</code> je použita ke spuštění aplikace a je
                nastavena pomocí konfiguračního souboru
                    <filename>application/configs/application.ini</filename>, který nám byl také
                předgenerován. Bootstrapovací třída, která dědí od <code>
                    Zend_Application_Bootstrap_Bootstrap</code> je k dispozici v
                    <filename>application/Bootstrap.php</filename> a může být použita pro specifický
                kód inicializující naši aplikaci.</para>
            <para>Soubor <filename>application.ini</filename>, který je uložen v adresáři
                    <filename>application/configs</filename> je načítán pomocí
                    <code>Zend_Config_Ini</code>. Ten umí interpretovat dědičnost sekcí, kterou
                uvedeme pomocí dvojtečky. Například: </para>
            <programlisting language="ini">[staging : production]</programlisting>
            <para>znamená, že sekce <code>staging</code> dědí nastavení sekce
                    <code>production</code>. Konstanta <code>APPLICATION_ENV</code> určuje, která
                sekce se načte. Při vývoji chceme používat sekci <code>development</code> a na živém
                serveru <code>production</code>. Všechny změny v <code>application.ini</code> budeme
                vkládat do sekce <code>production</code>. Tím docílíme toho, že všechny varianty
                konfigurace budou obsahovat to, co jsme přidali do <code>production</code>.</para>
        </section>
        <section>
            <title>Úpravy souboru application.ini</title>
            <para>První změna kterou musíme udělat je nastavení naší časové zóny, aby správně
                fungovaly PHPčkové funkce pro práci s datem a časem. Upravíme
                    <filename>application/configs/application.ini</filename> a pod všechny hodnoty
                    <code>phpSettings</code> v sekci <code>[production]</code> přidáme:</para>
            <programlisting language="ini">phpSettings.date.timezone = "Europe/Prague"</programlisting>
            <para>Samozřejmě volbu můžeme upravit podle vlastní časové zóny. Teď už jsme připraveni
                začít přidávat kód specifický pro naši aplikaci.</para>
        </section>
    </section>
    <section>
        <title>Kód naší aplikace</title>
        <para>Předtím než začneme upravovat soubory, je nutné pochopit, jak je aplikace v Zend
            Frameworku strukturovaná. Každá stránka aplikace je označována jako <emphasis
                role="bold">akce</emphasis> [en: action] a ty jsou seskupeny v <emphasis role="bold"
                >kontrolerech</emphasis> [en: controller]. Pro URL ve formátu
                <uri>http://localhost/zf-tutorial/public/news/view</uri> je kontroler
                <code>News</code> a akce <code>view</code>. To umožňuje seskupování souvisejících
            akcí. Například kontroler <code>News</code> může mít akce <code>list</code>,
                <code>archived</code>, <code>view</code>. MVC systém Zend Frameworku podporuje také
            moduly, které slouží k seskupování kontrolerů. Tato aplikace nebude tak velká, abychom
            se jimi museli zabývat.</para>
        <para>V základním nastavení si Zend Framework rezervuje akci <code>index</code> jako
            výchozí. To je pro případy jako je <uri>http://localhost/zf-tutorial/public/news/</uri>,
            kdy není akce zadána. Zavolá se tedy výchozí akce <code>index</code>. Existuje také
            výchozí jméno kontroleru, <code>index</code>, a proto
                <uri>http://localhost/zf-tutorial/public/</uri> zavolá akci <code>index</code> z
                <code>Index</code> kontroleru.</para>
        <para>Protože jsme v jednoduchém tutoriálu, tak se nebudeme zabývat <quote>složitými</quote>
            věcmi jako je přihlašování apod. To může počkat do samostatného návodu (a nebo si o tom
            můžete přečíst v <emphasis role="italics">Zend Framework in Action</emphasis>!).</para>
        <para>Máme čtyři stránky, které se vztahují k albům a ty seskupíme do jednoho kontoleru jako
            čtyři akce. Použijeme výchozí kontoler [<code>Index</code>] a akce v něm budou:</para>
        <para>
            <table frame="all">
                <title/>
                <tgroup cols="3">
                    <colspec colname="c1" colnum="1" colwidth="1.0*"/>
                    <colspec colname="newCol2" colnum="2"/>
                    <colspec colname="c2" colnum="3" colwidth="1.0*"/>
                    <thead>
                        <row>
                            <entry>Stránka</entry>
                            <entry>Kontroler</entry>
                            <entry>Akce</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>Domácí stránka</entry>
                            <entry><code>Index</code></entry>
                            <entry><code>index</code></entry>
                        </row>
                        <row>
                            <entry>Přidat nové album</entry>
                            <entry><code>Index</code></entry>
                            <entry><code>add</code></entry>
                        </row>
                        <row>
                            <entry>Editovat album </entry>
                            <entry><code>Index</code></entry>
                            <entry><code>edit</code></entry>
                        </row>
                        <row>
                            <entry>Smazat album</entry>
                            <entry><code>Index</code></entry>
                            <entry><code>delete</code></entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </para>
        <para>Až budeme mít složitější web, budeme potřebovat více kontrolerů a pokud to bude
            potřeba, tak můžeme použít i moduly pro seskupování kontrolerů.</para>
    </section>
    <section>
        <title>Vytvoření kontroleru</title>
        <para>Třída kontroleru v Zend Frameworku musí být pojmenována <code>{Jméno
                kontroleru}Controller</code>. Všimněte si že <code>{Jméno kontroleru}</code> musí
            začínat velkým písmenem. Tato třída musí být uložena v souboru <filename>{Jméno
                kontroleru}Controller.php</filename> v adresáři
                <filename>application/controllers</filename>. Každá akce je <code>public</code>
            funkce ve třídě kontroleru a musí být pojmenována <code>{jméno akce}Action</code>. V
            tomto případě začíná <code>{jméno akce}</code> malým písmenem a i zbytek musí být malými
            písmeny. Názvy kontrolerů a akcí se střídajícími se velkými a malými písmeny jsou
            povoleny, ale mají svá pravidla, které je potřeba pochopit dříve, než je začnete
            používat. Podívejte se do dokumentace!</para>
        <para>Třída našeho kontroleru <code>IndexController</code> je uložena v souboru
                <filename>application/controllers/ IndexController.php</filename>, který nám
            automaticky vygeneroval Zend_Tool. Obsahuje také první akci, <code>indexAction()</code>,
            takže musíme přidat jen ty ostatní.</para>
        <para>Další akce se do kontroleru přidávají pomocí nástroje <application>zf</application> a
            příkazu <code>create action</code>. Otevřeme Terminál nebo příkazovou řádku, přejdeme do
            našeho adresáře <filename>zf-tutorial/</filename> a zadáme tyto tři příkazy: </para>
        <programlisting>zf create action add Index
zf create action edit Index
zf create action delete Index</programlisting>
        <para>Těmito příkazy jsme v <code>IndexController</code>u vytvořili tři nové metody:
                <code>addAction</code>, <code>editAction</code> a <code>deleteAction</code>. Také se
            nám vygenerovaly příslušné view scripty, které budeme potřebovat později. Teď už máme
            všechny čtyři akce, které chceme používat.</para>
        <para>Jejich URL jsou:</para>
        <para>
            <table frame="all">
                <title/>
                <tgroup cols="2">
                    <colspec colname="c1" colnum="1" colwidth="1.0*"/>
                    <colspec colname="c2" colnum="2" colwidth="1.0*"/>
                    <thead>
                        <row>
                            <entry>URL</entry>
                            <entry>Metoda akce</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>http://localhost/zf-tutorial/public/</entry>
                            <entry><code>IndexController::indexAction()</code></entry>
                        </row>
                        <row>
                            <entry>http://localhost/zf-tutorial/public/index/add</entry>
                            <entry><code>IndexController::addAction()</code></entry>
                        </row>
                        <row>
                            <entry>http://localhost/zf-tutorial/public/index/edit</entry>
                            <entry><code>IndexController::editAction()</code></entry>
                        </row>
                        <row>
                            <entry>http://localhost/zf-tutorial/public/index/delete</entry>
                            <entry><code>IndexController::deleteAction()</code></entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </para>
        <para>Teď si můžete otestovat tři nové akce a měli by jste vidět zprávu jako je tato:</para>
        <para><emphasis role="italics">View script for controller <emphasis role="bold"
                    >index</emphasis> and script/action name <emphasis role="bold"
                >add</emphasis></emphasis>
        </para>
        <warning>
            <para>Pokud uvidíme Chybu 404, tak buď nemáte v Apachi povolený modul
                    <code>mod_rewrite</code> nebo mátě špatně nastavený <code>AllowOverride</code> v
                konfiguraci Apache a proto se nezpracová soubor <filename>.htaccess</filename> ze
                složky <filename>public/</filename>.</para>
        </warning>
    </section>
    <section>
        <title>Databáze</title>
        <para>Teď když už máme připravenou kostru aplikace s kontrolerem, akcemi a view scripty, je
            čas se podívat na datový model naší aplikace. Připomeňme, že model je ta část, která se
            stará o hlavní úkol aplikace (někdy také nazývané <quote>business rules</quote>. V našem
            případě se stará o databázi. Použijeme třídu <classname>Zend_Db_Table</classname>, která
            nám bude vybírat, vkládat a mazat řádky z databázové tabulky.</para>
        <section>
            <title>Nastavení databáze</title>
            <para>Abychom mohli používat <classname>Zend_Db_Table</classname>, musíme nastavit, ke
                které databázi se má připojit a jaké se má použít uživatelské jméno a heslo. Protože
                to nechceme dát natvrdo do aplikace, uložíme údaje do konfiguračního souboru.
                Komponenta <classname>Zend_Application</classname> má resource pro připojení k
                databázi, takže všechno co musíme udělat je nastavit příslušné údaje v souboru
                    <filename>configs/application.ini</filename> a ona se postará o zbytek.</para>
            <para>Otevřeme <filename>configs/application.ini</filename> a přidáme následující řádky
                na konec sekce <code>[production]</code> (t.j. nad sekci
                <code>[staging]</code>):</para>
            <programlisting language="ini">resources.db.adapter = PDO_MYSQL
resources.db.params.host = localhost
resources.db.params.username = rob
resources.db.params.password = 123456
resources.db.params.dbname = zf-tutorial</programlisting>
            <para>Samozřejmě použijete svoje uživatelské jméno, heslo a název databáze, ne moje! Teď
                se nám bude databázové spojení vytvářet automaticky a také se nastaví jako výchozí
                adaptér <classname>Zend_Db_Table</classname>. O dalším dostupných resource pluginech
                si můžete přečíst zde: <link
                    xlink:href="http://framework.zend.com/manual/en/zend.application.available-resources.html"
                    >http://framework.zend.com/manual/en/zend.application.available-resources.html</link></para>
        </section>
        <section>
            <title>Vytvoření databázové tabulky</title>
            <para>Jak jsme říkali na začátku, budeme pro ukládání dat o albech používat databázi.
                Použijeme MySQL, takže příkaz pro vytvoření tabulky je:</para>
            <programlisting language="sql">CREATE TABLE albums (
  id int(11) NOT NULL auto_increment,
  artist varchar(100) NOT NULL,
  title varchar(100) NOT NULL,
  PRIMARY KEY (id)
);</programlisting>
            <para>Spusťte ho v nějakém MySQL klientovi, třeba phpMyAdmin nebo přes standardního
                řádkového MySQL klienta.</para>
        </section>
        <section>
            <title>Vložení testovacích dat</title>
            <para>Také bychom do tabulky měli vložit nějaká data, abychom mohli otestovat, jestli
                nám je hlavní stránka správně načítá. Použijeme prvních pár
                    <quote>Nejprodávanějších</quote> CD z britského Amazonu. Ve svém MySQL klientovi
                spusťte:</para>
            <programlisting language="sql"><![CDATA[INSERT INTO albums (artist, title) VALUES
    ('Paolo Nutine', 'Sunny Side Up'),
    ('Florence + The Machine', 'Lungs'),
    ('Massive Attack', 'Heligoland'),
    ('Andre Rieu', 'Forever Vienna'),
    ('Sade', 'Soldier of Love');]]>
            </programlisting>
            <para>Teď už máme databázi i data a můžeme pro ně napsat velmi jednoduchý model.</para>
        </section>
    </section>
    <section>
        <title>Model</title>
        <para>V Zend Frameworku není třída <classname>Zend_Model</classname>, protože model je vaše
            business logika a rozhodnutí jak s ní pracovat je na vás. Existuje mnoho komponent,
            které můžete použít podle toho, co potřebujete. Jeden přístup je použití tříd modelu,
            kdy každá reprezentuje jednu entitu ve vaší aplikaci, a využít mapovací objekty, které
            načítají a ukládají entity do databáze. Tento přístup je popsán v Zend Framework
            QuickStart na adrese <link
                xlink:href="http://framework.zend.com/manual/en/learning.quickstart.create-model.html"
                >http://framework.zend.com/manual/en/learning.quickstart.create-model.html</link>.</para>
        <para>V tomto tutoriálu vytvoříme model, který dědí od <classname>Zend_Db_Table</classname>
            a používá <classname>Zend_Db_Table_Row</classname>. Třída
                <classname>Zend_Db_Table</classname>, implementuje návrhový vzor Table Data Gateway,
            který umožňuje objektově pracovat s daty v databázové tabulce. Mějte na paměti, že vzor
            Table Data Gateway může být ve větších systémech limitující.</para>
        <para>Z abstraktní třídy <classname>Zend_Db_Table_Abstract</classname> budeme dědit naši
            třídu, které je specifická pro správu alb. Je jedno, jak naši třídu pojmenujeme, ale
            dává smysl ji pojmenovat jako databázovou tabulku. Náš projekt má výchozí autoloader
            inicitalizovaný <classname>Zend_Application</classname>. Ten mapuje třídy v modulu na
            adresář, kde jsou uloženy. Pro složky <filename>application/*</filename> používáme
            prefix <classname>Applcation_</classname>.</para>
        <para>Autoloader mapuje třídy na adresáře takto:<table frame="all">
                <title>Mapování tříd na adresáře</title>
                <tgroup cols="2">
                    <colspec colname="c1" colnum="1" colwidth="1.0*"/>
                    <colspec colname="c2" colnum="2" colwidth="1.0*"/>
                    <thead>
                        <row>
                            <entry>Prefix</entry>
                            <entry>Adresář</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry><classname>Form</classname></entry>
                            <entry><filename>forms</filename></entry>
                        </row>
                        <row>
                            <entry><classname>Model</classname></entry>
                            <entry><filename>models</filename></entry>
                        </row>
                        <row>
                            <entry><classname>Model_DbTable</classname></entry>
                            <entry><filename>models/DbTable</filename></entry>
                        </row>
                        <row>
                            <entry><classname>Model_Mapper</classname></entry>
                            <entry><filename>models/mappers</filename></entry>
                        </row>
                        <row>
                            <entry><classname>Plugin</classname></entry>
                            <entry><filename>plugins</filename></entry>
                        </row>
                        <row>
                            <entry><classname>Service</classname></entry>
                            <entry><filename>services</filename></entry>
                        </row>
                        <row>
                            <entry><classname>View_Filter</classname></entry>
                            <entry><filename>views/filters</filename></entry>
                        </row>
                        <row>
                            <entry><classname>View_Helper</classname></entry>
                            <entry><filename>views/helpers</filename></entry>
                        </row>
                    </tbody>
                </tgroup>
            </table></para>
        <para>Protože budeme pro pojmenování používat název tabulky, <code>albums</code>, a protože
            použijeme <classname>Zend_Db_Table</classname>, bude se naše třída jmenovat
                <classname>Application_Model_DbTable_Albums</classname> a bude uložena v souboru
                <filename>applications/models/DbTable/Albums.php</filename></para>
        <para>Aby <classname>Zend_Db_Table</classname> věděla, kterou tabulku má spravovat, musíme
            nastavit protected atribut <varname>$_name</varname> na jméno tabulky.
                <classname>Zend_Db_Table</classname> dále předpokládá, že tabulka má primární klíč
                <code>id</code>, který je automaticky zvyšován na straně databáze. Jeho jméno může
            být v případě potřeby také změněno.</para>
        <para>Abychom si ušetřili práci, můžeme použít <command>zf</command> z příkazové řádky.
            Zadáme následující příkaz:</para>
        <programlisting><![CDATA[zf create db-table Albums albums]]></programlisting>
        <para>Nástroj nám vytvořil soubor <filename>Albums.php</filename> ve složce
                <filename>application/models/DbTable</filename>. V tomto souboru je třída
            pojmenovaná <classname>Application_Model_DbTable_Albums</classname>, která obsahuje
            nastavené jméno databázové tabulky, se kterou tato třída pracuje.</para>
        <para>Potřebujeme ještě přidat nějakou funkcionalitu, takže upravíme
                <filename>application/models/DbTable/Albums.php</filename> a přidáme metody
                <code>getAlbum()</code>, <code>addAlbum()</code>, <code>updateAlbum()</code> a
                <code>deleteAlbum()</code>, takže teď to vypadá takhle: </para>
        <programlisting language="php"><![CDATA[<?php
class Application_Model_DbTable_Albums extends Zend_Db_Table_Abstract
{
    protected $_name = 'albums';

    public function getAlbum($id)
    {
        $id = (int)$id;
        $row = $this->fetchRow('id = ' . $id);
        if (!$row) {
            throw new Exception("Could not find row $id");
        }
        return $row->toArray();
    }

    public function addAlbum($artist, $title)
    {
        $data = array(
            'artist' => $artist,
            'title' => $title,
        );
        $this->insert($data);
    }

    public function updateAlbum($id, $artist, $title)
    {
        $data = array(
            'artist' => $artist,
            'title' => $title,
        );
        $this->update($data, 'id = '. (int)$id);
    }

    public function deleteAlbum($id)
    {
        $this->delete('id =' . (int)$id);
    }
}]]></programlisting>
        <para>Vytvořili jsme čtyři pomocné metody, které naše aplikace použije jako rozhraní pro
            přístup k databázi. <code>getAlbum()</code> načte jeden řádek jako pole,
                <code>addAlbum()</code> vytvoří nový řádek v databázi, <code>updateAlbum()</code>
            aktualizuje řádek alba v databázi a <code>deleteAlbum()</code> ho smaže. Kód každé z
            těchto metod je samovysvětlující. I když to v tomto tutoriálu není potřeba, můžete také
            říct <classname>Zend_Db_Table</classname> o souvisejících tabulkách a ta tak může
            načítat data i z nich. Teď potřebujeme v kontroleru získat data z modelu a zobrazit je
            pomocí view skriptů. Nicméně, nejdříve je potřeba pochopit, jak v Zend_Frameworku
            funguje šablonovací systém.</para>
    </section>
    <section>
        <title>Layout a viewčka</title>
        <para>View komponenta Zend Frameworku se podle očekávání jmenuje
                <classname>Zend_View</classname>. Umožňuje nám oddělit kód pro zobrazení stránky od
            aplikačního kódu.</para>
        <para>Základní použití <classname>Zend_View</classname> je:</para>
        <programlisting language="php"><![CDATA[$view = new Zend_View();
$view->setScriptPath('/path/to/scripts');
echo $view->render('script.php');]]></programlisting>
        <para>Na první pohled je vidět, že je zbytečné opakovat takovýdle nudný kód v každé akci.
            Raději si view zinicializujeme někde jinde a pak jen budeme již inicializovaný objekt
            používat v jednotlivých akcích. Zend Framework obsahuje Action Helper
                <classname>ViewRenderer</classname>. Ten za nás udělá inicializaci proměnné
                <code>$this->view</code> v kontroleru a také nám po skončení akce vykreslí view
            skript</para>
        <para><classname>ViewRenderer</classname> nastaví instanci <classname>Zend_View</classname>
            tak, aby view skripty hledala ve složce
                <filename>views/scripts/{jméno-kontroleru}</filename> a ve výchozím nastavení
            vyrenderovala view skript, který se jmenuje stejně jako akce, ale s příponou .phtml.
            Použije se tedy view script v souboru
                <filename>views/scripts/{jméno-kontroleru}/{jméno-akce}.phtml</filename> a
            vyrenderovaný výsledek se uloží do vlastnosti <varname>body</varname> objektu
                <classname>Response</classname>. Objekt <classname>Response</classname> se používá
            pro shromáždění všech HTTP hlaviček, obsahu a výjimek vygenerovaných z MVC. Front
            kontroler pak na konci zpracování odešle hlavičky a obsah
            <varname>body</varname>.</para>
        <para>Tohle všechno je pro nás vygenerováno, pokud použijeme
                <classname>Zend_Tool</classname> pro vytvoření projektu a pro přidávání kontrolerů a
            akcí pomocí příkazů <command>zf create controller</command> a <command>zf create
                action</command>.</para>

        <section>
            <title>Společný HTML kód: Layouty</title>
            <para>Brzy uvidíme, že ve view budeme mít spoustu společného HTML kódu pro hlavičku,
                patičku a sidebar(y). Vzhledem k tomu, že to je velmi častý problém, Zend Framework
                obsahuje komponentu <classname>Zend_Layout</classname>, která ho řeší.
                    <classname>Zend_Layout</classname> nám umožní přesunout hlavičku, patičku a
                další společné části do skriptu pro layout, do kterého se potom vykreslí kód
                konkrétního view skriptu pro danou akci.</para>
            <para>Výchozí místo pro ukládání layoutů je <filename>application/layouts/</filename> a
                existuje také resource pro <classname>Zend_Application</classname>, který nám
                    <classname>Zend_Layout</classname> nakonfiguruje. Pro vytvoření layout skriptu a
                úpravu <filename>application.ini</filename> opět použijeme
                    <classname>Zend_Tool</classname>. Z příkazováné řádky zadáme v adresáři
                    <filename>zf-tutorial</filename>:</para>
            <programlisting language="cmd"><![CDATA[zf enable layout]]></programlisting>
            <para><classname>Zend_Tool</classname> vytvořil složku
                    <filename>application/layouts/scripts</filename> a v ní vytvořil view skript
                    <filename>layout.phtml</filename>. Také upravil
                    <filename>application.ini</filename> a do sekce <code>[production]</code> přidal
                    <code>resources.layout.layoutPath = APPLICATION_PATH
                "/layouts/scripts/"</code>.</para>
            <para>Na konci zpracování požadavku, po skončení běhu jednotlivých akcí,
                    <classname>Zend_Layout</classname> vykreslí náš layout.
                    <classname>Zend_Tool</classname> vytvořil základní layout, který jen zobrazí
                obsah view skriptu dané akce. Doplníme do něj HTML kód protřebný pro náš web.
                Otevřete <filename>zf-tutorial/application/layouts/scripts/layout.phtml</filename> a
                nahraďte původní kód tímto:</para>
            <programlisting language="html"><![CDATA[<?php
$this->headMeta()->appendHttpEquiv('Content-Type', 'text/html;charset=utf-8');
$this->headTitle()->setSeparator(' - ');
$this->headTitle('Zend Framework Tutorial');
echo $this->doctype(); ?>]]></programlisting>
            <programlisting language="xml"><![CDATA[<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <?php echo $this->headMeta(); ?>
    <?php echo $this->headTitle(); ?>
</head>
<body>
<div id="content">
    <h1><?php echo $this->escape($this->title); ?></h1>
    <?php echo $this->layout()->content; ?>
</div>
</body>
</html>]]></programlisting>
            <para>Layout obsahuje vnější HTML kód, který je celkem typický. A protože to je normální
                PHP soubor, můžete v něm používat PHP. Je k dispozici proměnná
                    <varname>$this</varname>, ve které je instance view, který byla vytvořena během
                bootstrapování. Můžeme ji použít pro získání dat, která byla vložena do viewčka a
                také z ní můžeme volat metody. Ty metody (říkáme jim view helpery) vrací string,
                který potom můžeme vyechovat.</para>
            <para>Na začátku stránky jsme si nastavili několik view helperů pro hlavičku a pak jsme
                vypsali správný doctype a ty nastavené view helpery. V
                    <code><![CDATA[<body>]]></code> jsme si vytvořili <code><![CDATA[<div>]]></code>
                s titulkem v <code><![CDATA[<h1>]]></code>. View skript aktuální akce vypíšeme z
                placeholderu pomocí view helperu <code>layout()</code>: <code>echo
                    $this->layout()->content;</code>. To znamená, že view skripty akcí se renderují
                dříve než view skript layoutu.</para>
            <para>Dříve než vyrenderujeme jakýkoliv view skript, je nutné si nastavit doctype
                stránky. View skripty akcí jsou rendrovány dříve a někdy potřebují vědět, který
                doctype je použit. To je důležité například pro
                <classname>Zend_Form</classname>.</para>
            <para>Doctype nastavíme přidáním dalšího řádku do do sekce <code>[production]</code> v
                    <filename>application.ini</filename>:</para>
            <programlisting language="ini">resources.view.doctype = "XHTML1_STRICT"</programlisting>
            <para>View helper <code>doctype()</code> teď bude vypisovat správný doctype a komponenty
                jako <classname>Zend_Form</classname> budou generovat odpovídající HTML.</para>
        </section>
        <section>
            <title>Stylování</title>
            <para>I když je toto <quote>jen</quote> tutoriál, potřebujeme CSS soubor, aby naše
                aplikace vypadala alespoň trochu k světu! Není jasné, jak nalinkujeme CSS soubor,
                protože URL neukazuje do správného kořenového adresáře. Naštestí existuje view
                helper <code>baseUrl()</code>. Ten zpracuje adresu požadavku a vrátí nám potřebný
                úsek URL.</para>
            <para>CSS přidáme do <code>&lt;head&gt;</code> v souboru
                    <filename>application/layouts/scripts/layout.phtml</filename>. Použijeme view
                helper <code>headLink()</code>:</para>
            <para><filename>zf-tutorial/application/layouts/scripts/layout.phtml</filename>:</para>
            <programlisting language="html"><![CDATA[...
<head>
    <?php echo $this->headMeta(); ?>
    <?php echo $this->headTitle(); ?>
    <?php echo $this->headLink()
        ->prependStylesheet($this->baseUrl().'/css/site.css'); ?>
</head>
...]]></programlisting>
            <para>Díky tomu, že jsme použili metodu <code>prependStylesheet()</code>, můžeme později
                přidat další, více specifické CSS soubory z view skriptů jednotlivých controllerů a
                ty budou zařazeny až po <filename>site.css</filename>.</para>
            <para>Nakonec vytvoříme nějaké CSS. V <filename>public/</filename> si vytvoříme adresář
                    <filename>css</filename> a soubor <filename>site.css</filename> s tímto
                kódem:</para>
            <para><filename>zf-tutorial/public/css/site.css</filename>:</para>
            <programlisting language="css"><![CDATA[body,html {
    margin: 0 5px;
    font-family: Verdana,sans-serif;
}
h1 {
    font-size: 1.4em;
    color: #008000;
}
a {
    color: #008000;
}

/* Table */
th {
    text-align: left;
}
td, th {
    padding-right: 5px;
}

/* style form */
form dt {
    width: 100px;
    display: block;
    float: left;
    clear: left;
}
form dd {
    margin-left: 0;
    float: left;
}
form #submitbutton {
    margin-left: 100px;
}]]></programlisting>
            <para>Teď už to vypadá trochu lépe, ale jak vidíte, přece jenom nejsem grafik!</para>
            <para>Teď můžeme vyprázdnit všechny čtyři automaticky vygenerované view skripty, abychom
                je mohli pak znovu naplnit. Takže vzhůru do toho, vyprázdněte soubory
                    <filename>index.phtml</filename>, <filename>add.phtml</filename>,
                    <filename>edit.phtml</filename> and <filename>delete.phtml</filename>, které jak
                si jistě pamatujete, jsou v adresáři
                    <filename>application/views/scripts/index</filename>.</para>
        </section>
    </section>
    <section>
        <title>Vypisování alb</title>
        <para>Teď když už máme připravené nastavení, databázi a kostry view skriptů, můžeme pokročit
            hlouběji a zobrazit nějaká alba. Použijeme na to <classname>IndexController</classname>
            a alba z databáze vypíšeme v <methodname>indexAction()</methodname>:</para>
        <para><filename>zf-tutorial/application/controllers/IndexController.php</filename>:</para>
        <programlisting language="php"><![CDATA[...
    function indexAction()
    {
        $albums = new Application_Model_DbTable_Albums();
        $this->view->albums = $albums->fetchAll();
    }
...]]></programlisting>
        <para>Nejprve vytvoříme instanci modelu (založeného na návrhovém vzoru table data gateway).
            Metoda <methodname>fetchAll()</methodname> vrací instanci
                <classname>Zend_Db_Table_Rowset</classname>, která nám ve view skriptu umožní
            iterovat přes vrácené řádky</para>
        <para>Teď můžeme naplnit příslušný view skript, <filename>index.phtml</filename>:</para>
        <para><filename>zf-tutorial/application/views/scripts/index/index.phtml</filename></para>
        <programlisting language="html"><![CDATA[<?php
$this->title = "My Albums";
$this->headTitle($this->title);
?>
<p><a href="<?php echo $this->url(array('controller'=>'index',
        'action'=>'add'));?>">Add new album</a></p>
<table>
<tr>
    <th>Title</th>
    <th>Artist</th>
    <th>&nbsp;</th>
</tr>
<?php foreach($this->albums as $album) : ?>
<tr>
    <td><?php echo $this->escape($album->title);?></td>
    <td><?php echo $this->escape($album->artist);?></td>
    <td>
        <a href="<?php echo $this->url(array('controller'=>'index',
            'action'=>'edit', 'id'=>$album->id));?>">Edit</a>
        <a href="<?php echo $this->url(array('controller'=>'index',
            'action'=>'delete', 'id'=>$album->id));?>">Delete</a>
    </td>
</tr>
<?php endforeach; ?>
</table>]]></programlisting>
        <para>První věc, ktero uděláme je nastavení titulku stránky (pro layout) a také nastavení
            titulku pro <code>&lt;head&gt;</code> pomocí view helperu <code>headTitle()</code> (ten
            se zobrazí v titulku v prohlížeči). Pak vytvoříme odkaz na přidání nového alba. View
            helper <classname>url()</classname> nám umožní snadno vytvářet odkazy včetně správné
            křoenové URL. Jednoduše mu předáme pole parametrů a on vyřeší zbytek.</para>
        <para>Dále vytvoříme html tabulku s řádky pro jednotlivá alba. Do nich vypíšeme titulek,
            intepreta a odkazy na editaci a smázání záznamu. Alba procházíme pomocí
                <code>foreach:</code>. Použijeme alternativní zápis pomocí dvojtečky a
                <code>endforeach;</code> kód je čitelnější než když musíte hledat související
            závorky. Na vytvoření odkazů na editaci a smazání jsme opět použili view helper
                <code>url()</code>.</para>
        <para>Pokud otevřete <link xlink:href="http://localhost/zf-tutorial/public/"
                >http://localhost/zf-tutorial/public/</link> tak by jste měli vidět krásný seznam
            alb, něco jako tohle:</para>
        <para><inlinemediaobject>
                <imageobject>
                    <imagedata fileref="img/albums-list.png"/>
                </imageobject>
            </inlinemediaobject></para>
    </section>
    <section>
        <title>Přidání nového alba</title>
        <para>Ted můžeme napsat funkcionalitu na přidání nového alba. Skladá se ze dvou
            částí:</para>
        <para>
            <itemizedlist>
                <listitem>
                    <para>Zobrazení formuláře pro zadání informací</para>
                </listitem>
                <listitem>
                    <para>Zpracování zadaných dat a uložení do databáze</para>
                </listitem>
            </itemizedlist>
        </para>
        <para>Použijeme na to <classname>Zend_Form</classname>. Ten nám usnadní vytváření formuláře
            a validaci zadaných dat. Formulář uložíme do třídy <classname>Form_Album</classname>,
            která dědí od <classname>Zend_Form</classname>. Třídu uložíme do souboru
                <filename>Album.php</filename> do adresáře <filename>forms</filename>. Začneme
            použitím nástroje <command>zf</command>: </para>
        <para><code>zf create form Album</code></para>
        <para>Tím vytvoříme soubor <filename>Album.php</filename> v adresáři
                <filename>application/forms</filename>. Vygenerovaný soubor obsahuje třídu s metodou
                <methodname>init()</methodname>. Otevřeme soubor
                <filename>application/forms/Album.php</filename> a metodu upravíme takto: </para>
        <para><filename>zf-tutorial/application/forms/Album.php</filename>:</para>
        <programlisting language="php"><![CDATA[<?php
class Application_Form_Album extends Zend_Form
{
    public function init()
    {
        $this->setName('album');

        $id = new Zend_Form_Element_Hidden('id');
        $id->addFilter('Int');

        $artist = new Zend_Form_Element_Text('artist');
        $artist->setLabel('Artist')
               ->setRequired(true)
               ->addFilter('StripTags')
               ->addFilter('StringTrim')
               ->addValidator('NotEmpty');

        $title = new Zend_Form_Element_Text('title');
        $title->setLabel('Title')
              ->setRequired(true)
              ->addFilter('StripTags')
              ->addFilter('StringTrim')
              ->addValidator('NotEmpty');

        $submit = new Zend_Form_Element_Submit('submit');
        $submit->setAttrib('id', 'submitbutton');

        $this->addElements(array($id, $artist, $title, $submit));
    }
}]]></programlisting>
        <para>V metodě <methodname>init()</methodname> vytvoříme čtyři elementy - id, artist, title
            a tlačítko submit. Každému nastavíme nějaké atributy, například popisek (label), který
            bude u políčka vypsán. U id si chceme být jisti, že to je pouze číslo, abychom předešli
            potenciálnímu SQL injection. To řeší filter <classname>Int</classname>.</para>
        <para>Textovým elementům přidáme filtry - <classname>StripTags</classname> a
                <classname>StringTrim</classname> - těmi odebereme HTML tagy a nepotřebné bílé
            znaky. Také je nastavíme jako povinné (<code>required</code>) a přidáme
                <classname>NotEmpty</classname> validátor, abychom ověřili, že uživatel vyplnil
            potřebné informace. (<classname>NotEmpty</classname> validátor tu není nutný, protože
            bude automaticky přidán díky <code>setRequired(true);</code> slouží tu tedy jen jako
            ukázka, jak přidat validátor.)</para>
        <para>Teď potřebujeme formulář zobrazit a poté zpracovat odeslaná data. Vyřešíme to v
                <methodname>addAction()</methodname> metodě v
            <classname>IndexController</classname>:</para>
        <para><filename>zf-tutorial/application/controllers/IndexController.php</filename>:</para>
        <programlisting language="php"><![CDATA[...
    function addAction()
    {
        $form = new Application_Form_Album();

        $form->submit->setLabel('Add');
        $this->view->form = $form;

        if ($this->getRequest()->isPost()) {
            $formData = $this->getRequest()->getPost();
            if ($form->isValid($formData)) {
                $artist = $form->getValue('artist');
                $title = $form->getValue('title');
                $albums = new Application_Model_DbTable_Albums();
                $albums->addAlbum($artist, $title);

                $this->_helper->redirector('index');
            } else {
                $form->populate($formData);
            }
        }
    }
    ...]]></programlisting>
        <para>Projděme to teď podrobněji:</para>
        <programlisting language="php"><![CDATA[    $form = new Application_Form_Album();
    $form->submit->setLabel('Add');
    $this->view->form = $form;]]></programlisting>
        <para>Vytvoříme instanci našeho <classname>Form_Album</classname>, nastavíme popisek
            odesílacího tlačítka na <quote>Add</quote> a nakonec formulář vložíme do view.</para>
        <programlisting language="php"><![CDATA[    if ($this->getRequest()->isPost()) {
        $formData = $this->getRequest()->getPost();
        if ($form->isValid($formData)) {]]></programlisting>
        <para>Pokud metoda <methodname>isPost()</methodname> na objektu requestu vrací
                <code>true</code>, tak byl formulář odeslán, takže pomocí
                <methodname>getPost()</methodname> získáme data a pomocí
                <methodname>isValid()</methodname> ověříme, že jsou správná.</para>
        <programlisting language="php"><![CDATA[            $artist = $form->getValue('artist');
            $title = $form->getValue('title');
            $albums = new Application_Model_DbTable_Albums();
            $albums->addAlbum($artist, $title);]]></programlisting>
        <para>Pokud je formulář validní, tak vytvoříme instanci modelu
                <classname>Application_Model_DbTable_Albums</classname> a pomocí dříve vytvořené
            metody <methodname>addAlbum()</methodname> vložíme nový záznam do databáze.</para>
        <programlisting language="php"><![CDATA[$this->_helper->redirector('index');]]></programlisting>
        <para>Po uložení alba přesměrujeme pomocí <classname>Redirector</classname> action helperu
            na action <code>index</code> (tedy přejdeme zpět na homepage).</para>
        <programlisting language="php"><![CDATA[        } else {
            $form->populate($formData);
        }]]></programlisting>
        <para>Pokud zadaná data nejsou validní, pak jimi naplníme formulář a znovu ho
            zobrazíme.</para>
        <para>Teď ještě musíme zařídit vykreslení formuláře ve view skriptu
                <filename>add.phtml</filename>:</para>
        <para><filename>zf-tutorial/application/views/scripts/index/add.phtml</filename>:</para>
        <programlisting language="php"><![CDATA[<?php
$this->title = "Add new album";

$this->headTitle($this->title);
echo $this->form ;
?>]]></programlisting>
        <para>Jak vidíte, vykreslení formuláře je jednoduché - jen ho vyechujeme. Formulář totiž ví,
            jak se má vykreslit. Teď si můžete vyzkoušet přidání alba pomocí odkazu <quote>Add new
                album</quote> na homepage.</para>
    </section>
    <section>
        <title>Editace alba</title>
        <para>Editace alba je skoro stejné jako přidání nového, takže kód je velmi podobný:</para>
        <para><filename>zf-tutorial/application/controllers/IndexController.php</filename></para>
        <programlisting language="php"><![CDATA[    ...
    function editAction()
    {
        $form = new Application_Form_Album();
        $form->submit->setLabel('Save');
        $this->view->form = $form;

        if ($this->getRequest()->isPost()) {
            $formData = $this->getRequest()->getPost();
            if ($form->isValid($formData)) {
                $id = (int)$form->getValue('id');
                $artist = $form->getValue('artist');
                $title = $form->getValue('title');
                $albums = new Application_Model_DbTable_Albums();
                $albums->updateAlbum($id, $artist, $title);

                $this->_helper->redirector('index');
            } else {
                $form->populate($formData);
            }
        } else {
            $id = $this->_getParam('id', 0);
            if ($id > 0) {
                $albums = new Application_Model_DbTable_Albums();
                $form->populate($albums->getAlbum($id));
            }
        }
    }
    ...]]></programlisting>
        <para>Podíváme se na rozdíly oproti přidávání alba. Nejdříve, při zobrazení fomuláře
            uživateli potřebujeme získat intepreta a titulek alba a naplnit s nimi formulářová pole.
            To se děje na konci metody: </para>
        <programlisting language="php"><![CDATA[            $id = $this->_getParam('id', 0);
            if ($id > 0) {
                $albums = new Application_Model_DbTable_Albums();
                $form->populate($albums->getAlbum($id));
            }]]></programlisting>
        <para>Poznamenejme, že toto se provede, když požadavek není odeslán POSTem, protože POST
            znamená, že formulář byl odeslán a máme ho zpracovat. Pro první zobrazení formuláře
            získáme id z požadavku pomocí metody <methodname>_getParam()</methodname>. Potom z
            modelu získáme záznam s albem a daty naplníme formulář. (Teď už víte, proč metoda
                <methodname>getAlbum()</methodname> vrací pole!)</para>
        <para>Po zvalidování formuláře potřebujeme uložit data zpět do správného řádku v databázi.
            To uděláme pomocí metody modelu <methodname>updateAlbum()</methodname>:</para>
        <programlisting language="php"><![CDATA[                $id = $form->getValue('id');
                $artist = $form->getValue('artist');
                $title = $form->getValue('title');
                $albums = new Application_Model_DbTable_Album
                $albums->updateAlbum($id, $artist, $title);]]></programlisting>
        <para>Šablona view skriptu je obdobná jako add.phtml:</para>
        <para><filename>zf-tutorial/application/views/scripts/index/edit.phtml</filename>:</para>
        <programlisting language="php"><![CDATA[<?php
$this->title = "Edit album";
$this->headTitle($this->title);
echo $this->form ;
?>]]></programlisting>
        <para>Teď už jde alba i editovat.</para>
    </section>
    <section>
        <title>Mazání alb</title>
        <para>Aby naše aplikace byla kompletní musíme ještě přidat mazání. Vzhledem k tomu, že u
            každého alba máme odkaz na smazání, tak by se na první pohled zdálo, že album smažeme po
            kliknutí na odkaz. Jenže to je špatně. Připomeňme si principy HTTP protokolu - nevratné
            akce by neměly být přístupné přes GET, ale jen přes POST.</para>
        <para>Při kliknutí na delete zobrazíme potvrzovací fomulář, kde když uživatel vybere
                <quote>yes</quote>, tak záznam smažeme. Vzhledem k tomu, že formulář je primitivní,
            vložíme jeho kód přímo do viewčka (<classname>Zend_Form</classname> je jen možnost, ne
            povinnost!).</para>
        <para>Začněme s kódem akce v
            <methodname>IndexController::deleteAction()</methodname>:</para>
        <para><filename>zf-tutorial/application/controllers/IndexController.php</filename>:</para>
        <programlisting language="php"><![CDATA[    ...
    public function deleteAction()
    {
        if ($this->getRequest()->isPost()) {
            $del = $this->getRequest()->getPost('del');
            if ($del == 'Yes') {
                $id = $this->getRequest()->getPost('id');
                $albums = new Application_Model_DbTable_Albums();
                $albums->deleteAlbum($id);
            }
            $this->_helper->redirector('index');
        } else {
            $id = $this->_getParam('id', 0);
            $albums = new Application_Model_DbTable_Albums();
            $this->view->album = $albums->getAlbum($id);
        }
    }
    ...]]></programlisting>
        <para>Stejně jako při přidávání nebo editaci použijeme ke zjištění, zda máme zobrazit
            potvrzovací formulář nebo provést mazání, metodu requestu
                <methodname>isPost()</methodname>. Pro vlastní smazání použijeme metodu
                <methodname>deleteAlbum()</methodname> z
                <classname>Application_Model_DbTable_Albums</classname>. Když požadavek nebude volán
            pomocí POSTu, tak podle parametru id získáme záznam z databáze a ten vložíme do view
            skriptu.</para>
        <para>View skript je jednoduchý formulář:</para>
        <para><filename>zf-tutorial/application/views/scripts/index/delete.phtml</filename></para>
        <programlisting language="html"><![CDATA[<?php
$this->title = "Delete album";
$this->headTitle($this->title);

?>
<p>Are you sure that you want to delete
  '<?php echo $this->escape($this->album['title']); ?>' by
  '<?php echo $this->escape($this->album['artist']); ?>'?
</p>
<form action="<?php echo $this->url(array('action'=>'delete')); ?>"
    method="post">
<div>
  <input type="hidden" name="id" value="<?php echo $this->album['id']; ?>" />
  <input type="submit" name="del" value="Yes" />
  <input type="submit" name="del" value="No" />
</div>
</form>]]></programlisting>
        <para>Uživateli zobrazíme potvrzovací hlášku a formulář s tlačítky yes a no. V akci pak
            hledáme přímo hodnotu <quote>Yes</quote>. </para>
        <para>Tak a je to - teď už máte hotovou celou fungující aplikaci.</para>
    </section>
    <section>
        <title>Závěr</title>
        <para>Tímto jsme skončili náš krátký pohled na tvorbu jednoduché, ale plně funkční, MVC
            aplikace s použitím Zend Frameworku. Doufám, že se vám líbil. Pokud najdete cokoliv
            špatně, prosím napište mi na <email>rob@akrabat.com</email></para>
        <para>Tento tutoriál se zabýval jen základy použití frameworku. Framework obsahuje mnohem
            více komponent k prozkoumání! Vynechal jsem také dost vysvětlování. Na mém webu <link
                xlink:href="http://akrabat.com">http://akrabat.com</link> najdete další články o
            Zend Frameworku. A také by jste si měli přečíst manuál na <link
                xlink:href="http://framework.zend.com/manual"
                >http://framework.zend.com/manual</link>.</para>
        <para>A konečně, pokud máte raději informace papírově, tak jsem napsal knihu <emphasis>Zend
                Framework in Action</emphasis>. Další informace jsou k dispozici na na <link
                xlink:href="http://www.zendframeworkinaction.com"
                >http://www.zendframeworkinaction.com</link>. Mrkněte na to :)</para>
        <section>
            <title>Závěr k překladu</title>
            <para>Při překladu jsem používal počeštěné anglické pojmy - kontroler mi přijde
                srozumitelnější než řadič :) Pokud narazíte na jakoukoliv chybu v textu, napište mi
                prosím na <email>mhujer@gmail.com</email> - buď to opravím v překladu a nebo předám
                autorovi, aby to opravil v originále.</para>
        </section>
    </section>
</article>
